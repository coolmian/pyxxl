{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"xxl-jobs \u7684python\u5ba2\u6237\u7aef\u5b9e\u73b0 \u4f7f\u7528pyxxl\u53ef\u4ee5\u65b9\u4fbf\u7684\u628aPython\u5199\u7684\u65b9\u6cd5\u6ce8\u518c\u5230xxl-job\u4e2d,\u4f7f\u7528xxl-job-admin\u7ba1\u7406Python\u5b9a\u65f6\u4efb\u52a1\u548c\u5468\u671f\u4efb\u52a1 \u5982\u4f55\u4f7f\u7528 pip install pyxxl \u5177\u4f53\u53ef\u4ee5\u67e5\u770bexample\u6587\u4ef6\u5939\u4e0b\u9762\u76842\u4e2a\u4f8b\u5b50 \u5f00\u53d1\u4eba\u5458 \u4e0b\u9762\u662f\u5f00\u53d1\u4eba\u5458\u5982\u4f55\u5feb\u6377\u7684\u642d\u5efa\u5f00\u53d1\u8c03\u8bd5\u73af\u5883 \u542f\u52a8xxl\u7684\u8c03\u5ea6\u4e2d\u5fc3 ./init_dev_env.sh \u542f\u52a8\u6267\u884c\u5668 poetry install # \u4fee\u6539app.py\u4e2d\u76f8\u5173\u7684\u914d\u7f6e\u4fe1\u606f,\u7136\u540e\u542f\u52a8 poetry run python example/app.py TODOs [x] \u81ea\u5b9a\u4e49\u67e5\u770b\u65e5\u5fd7\u51fd\u6570 [x] docs","title":"Index"},{"location":"#xxl-jobs-python","text":"\u4f7f\u7528pyxxl\u53ef\u4ee5\u65b9\u4fbf\u7684\u628aPython\u5199\u7684\u65b9\u6cd5\u6ce8\u518c\u5230xxl-job\u4e2d,\u4f7f\u7528xxl-job-admin\u7ba1\u7406Python\u5b9a\u65f6\u4efb\u52a1\u548c\u5468\u671f\u4efb\u52a1","title":"xxl-jobs \u7684python\u5ba2\u6237\u7aef\u5b9e\u73b0"},{"location":"#_1","text":"pip install pyxxl \u5177\u4f53\u53ef\u4ee5\u67e5\u770bexample\u6587\u4ef6\u5939\u4e0b\u9762\u76842\u4e2a\u4f8b\u5b50","title":"\u5982\u4f55\u4f7f\u7528"},{"location":"#_2","text":"\u4e0b\u9762\u662f\u5f00\u53d1\u4eba\u5458\u5982\u4f55\u5feb\u6377\u7684\u642d\u5efa\u5f00\u53d1\u8c03\u8bd5\u73af\u5883","title":"\u5f00\u53d1\u4eba\u5458"},{"location":"#xxl","text":"./init_dev_env.sh","title":"\u542f\u52a8xxl\u7684\u8c03\u5ea6\u4e2d\u5fc3"},{"location":"#_3","text":"poetry install # \u4fee\u6539app.py\u4e2d\u76f8\u5173\u7684\u914d\u7f6e\u4fe1\u606f,\u7136\u540e\u542f\u52a8 poetry run python example/app.py","title":"\u542f\u52a8\u6267\u884c\u5668"},{"location":"#todos","text":"[x] \u81ea\u5b9a\u4e49\u67e5\u770b\u65e5\u5fd7\u51fd\u6570 [x] docs","title":"TODOs"},{"location":"api/","text":"Class Docs __init__ ( xxl_admin_baseurl , executor_name , handler = None , access_token = None , host = None , port = 9999 ) Example runner = PyxxlRunner( \"http://localhost:8080/xxl-job-admin/api/\", executor_name=\"xxl-job-executor-sample\", port=9999, host=\"172.17.0.1\", handler=xxl_handler, ) Parameters: Name Type Description Default xxl_admin_baseurl str xxl-admin\u670d\u52a1\u7aef\u66b4\u9732\u7684restful\u63a5\u53e3url(\u5982http://localhost:8080/xxl-job-admin/api/) required executor_name str xxl-admin\u4e0a\u5b9a\u4e49\u7684\u6267\u884c\u5668\u540d\u79f0,\u5fc5\u987b\u4e00\u81f4\u5426\u5219\u65e0\u6cd5\u6ce8\u518c(\u5982xxl-job-executor-sample) required handler JobHandler \u6267\u884c\u5668\u652f\u6301\u7684job,\u6ca1\u6709\u9884\u5148\u5b9a\u4e49\u7684job\u540d\u79f0\u4e5f\u4f1a\u6267\u884c\u5931\u8d25 None access_token str xxl-admin\u7684\u8ba4\u8bc1token,\u5982\u679c\u6ca1\u6709\u5f00\u542f\u4e0d\u9700\u8981\u4f20. Defaults to None. None host _type_ \u6267\u884c\u5668\u7ed1\u5b9a\u7684host,xxl-admin\u901a\u8fc7\u8fd9\u4e2ahost\u6765\u56de\u8c03pyxxl\u6267\u884c\u5668,\u5982\u679c\u4e0d\u586b\u4f1a\u9ed8\u8ba4\u53d6\u7b2c\u4e00\u4e2a\u7f51\u5361\u7684\u5730\u5740. Defaults to None. None port int \u6267\u884c\u5668\u7ed1\u5b9a\u7684http\u670d\u52a1\u7684\u7aef\u53e3,\u4f5c\u7528\u540chost. Defaults to 9999. 9999","title":"Api"},{"location":"api/#class-docs","text":"","title":"Class Docs"},{"location":"api/#pyxxl.main.PyxxlRunner.__init__","text":"Example runner = PyxxlRunner( \"http://localhost:8080/xxl-job-admin/api/\", executor_name=\"xxl-job-executor-sample\", port=9999, host=\"172.17.0.1\", handler=xxl_handler, ) Parameters: Name Type Description Default xxl_admin_baseurl str xxl-admin\u670d\u52a1\u7aef\u66b4\u9732\u7684restful\u63a5\u53e3url(\u5982http://localhost:8080/xxl-job-admin/api/) required executor_name str xxl-admin\u4e0a\u5b9a\u4e49\u7684\u6267\u884c\u5668\u540d\u79f0,\u5fc5\u987b\u4e00\u81f4\u5426\u5219\u65e0\u6cd5\u6ce8\u518c(\u5982xxl-job-executor-sample) required handler JobHandler \u6267\u884c\u5668\u652f\u6301\u7684job,\u6ca1\u6709\u9884\u5148\u5b9a\u4e49\u7684job\u540d\u79f0\u4e5f\u4f1a\u6267\u884c\u5931\u8d25 None access_token str xxl-admin\u7684\u8ba4\u8bc1token,\u5982\u679c\u6ca1\u6709\u5f00\u542f\u4e0d\u9700\u8981\u4f20. Defaults to None. None host _type_ \u6267\u884c\u5668\u7ed1\u5b9a\u7684host,xxl-admin\u901a\u8fc7\u8fd9\u4e2ahost\u6765\u56de\u8c03pyxxl\u6267\u884c\u5668,\u5982\u679c\u4e0d\u586b\u4f1a\u9ed8\u8ba4\u53d6\u7b2c\u4e00\u4e2a\u7f51\u5361\u7684\u5730\u5740. Defaults to None. None port int \u6267\u884c\u5668\u7ed1\u5b9a\u7684http\u670d\u52a1\u7684\u7aef\u53e3,\u4f5c\u7528\u540chost. Defaults to 9999. 9999","title":"__init__()"},{"location":"example/","text":"Example For full examples see github . App import asyncio import logging from pyxxl import PyxxlRunner logger = logging . getLogger ( \"pyxxl\" ) handler = logging . StreamHandler () logger . addHandler ( handler ) logger . setLevel ( logging . DEBUG ) app = PyxxlRunner ( \"http://localhost:8080/xxl-job-admin/api/\" , executor_name = \"xxl-job-executor-sample\" , port = 9999 , host = \"172.17.0.1\" , ) @app . handler . register ( name = \"demoJobHandler\" ) async def test_task (): await asyncio . sleep ( 5 ) return \"\u6210\u529f...\" @app . handler . register ( name = \"xxxxx\" ) async def test_task3 (): await asyncio . sleep ( 3 ) return \"\u6210\u529f3\" app . run_executor () Gunicorn Runserver app.py import asyncio import logging from fastapi import FastAPI from pyxxl import JobHandler logger = logging . getLogger ( \"pyxxl\" ) handler = logging . StreamHandler () logger . addHandler ( handler ) logger . setLevel ( logging . DEBUG ) app = FastAPI () xxl_handler = JobHandler () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } @xxl_handler . register ( name = \"demoJobHandler\" ) async def test_task (): await asyncio . sleep ( 10 ) return \"\u6210\u529f10\" gunicorn.conf.py import atexit from multiprocessing.util import _exit_function from pyxxl import PyxxlRunner bind = [ \"0.0.0.0:8000\" ] backlog = 512 workers = 1 timeout = 300 graceful_timeout = 2 limit_request_field_size = 8192 def when_ready ( server ): # pylint: disable=import-outside-toplevel,unused-import,no-name-in-module from app import xxl_handler atexit . unregister ( _exit_function ) runner = PyxxlRunner ( \"http://localhost:8080/xxl-job-admin/api/\" , executor_name = \"xxl-job-executor-sample\" , host = \"172.17.0.1\" , handler = xxl_handler , ) server . pyxxl_runner = runner runner . run_with_daemon ()","title":"Example"},{"location":"example/#example","text":"For full examples see github .","title":"Example"},{"location":"example/#app","text":"import asyncio import logging from pyxxl import PyxxlRunner logger = logging . getLogger ( \"pyxxl\" ) handler = logging . StreamHandler () logger . addHandler ( handler ) logger . setLevel ( logging . DEBUG ) app = PyxxlRunner ( \"http://localhost:8080/xxl-job-admin/api/\" , executor_name = \"xxl-job-executor-sample\" , port = 9999 , host = \"172.17.0.1\" , ) @app . handler . register ( name = \"demoJobHandler\" ) async def test_task (): await asyncio . sleep ( 5 ) return \"\u6210\u529f...\" @app . handler . register ( name = \"xxxxx\" ) async def test_task3 (): await asyncio . sleep ( 3 ) return \"\u6210\u529f3\" app . run_executor ()","title":"App"},{"location":"example/#gunicorn-runserver","text":"app.py import asyncio import logging from fastapi import FastAPI from pyxxl import JobHandler logger = logging . getLogger ( \"pyxxl\" ) handler = logging . StreamHandler () logger . addHandler ( handler ) logger . setLevel ( logging . DEBUG ) app = FastAPI () xxl_handler = JobHandler () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } @xxl_handler . register ( name = \"demoJobHandler\" ) async def test_task (): await asyncio . sleep ( 10 ) return \"\u6210\u529f10\" gunicorn.conf.py import atexit from multiprocessing.util import _exit_function from pyxxl import PyxxlRunner bind = [ \"0.0.0.0:8000\" ] backlog = 512 workers = 1 timeout = 300 graceful_timeout = 2 limit_request_field_size = 8192 def when_ready ( server ): # pylint: disable=import-outside-toplevel,unused-import,no-name-in-module from app import xxl_handler atexit . unregister ( _exit_function ) runner = PyxxlRunner ( \"http://localhost:8080/xxl-job-admin/api/\" , executor_name = \"xxl-job-executor-sample\" , host = \"172.17.0.1\" , handler = xxl_handler , ) server . pyxxl_runner = runner runner . run_with_daemon ()","title":"Gunicorn Runserver"}]}