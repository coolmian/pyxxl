{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"xxl-jobs \u7684python\u5ba2\u6237\u7aef\u5b9e\u73b0 \u4f7f\u7528pyxxl\u53ef\u4ee5\u65b9\u4fbf\u7684\u628aPython\u5199\u7684\u65b9\u6cd5\u6ce8\u518c\u5230xxl-job\u4e2d,\u4f7f\u7528xxl-job-admin\u7ba1\u7406Python\u5b9a\u65f6\u4efb\u52a1\u548c\u5468\u671f\u4efb\u52a1 \u5df2\u7ecf\u652f\u6301\u7684\u529f\u80fd \u6267\u884c\u5668\u6ce8\u518c\u5230job-admin task\u6ce8\u518c\uff0c\u7c7b\u4f3c\u4e8eflask\u8def\u7531\u88c5\u9970\u5668\u7684\u7528\u6cd5 \u4efb\u52a1\u7684\u7ba1\u7406\uff08\u652f\u6301\u5728\u754c\u9762\u4e0a\u53d6\u6d88\uff0c\u53d1\u8d77\u7b49\u64cd\u4f5c\uff0c\u4efb\u52a1\u5b8c\u6210\u540e\u4f1a\u56de\u8c03admin\uff09 \u6240\u6709\u963b\u585e\u7b56\u7565\u7684\u652f\u6301 \u5f02\u6b65\u652f\u6301\uff08\u63a8\u8350\uff09 \u5f85\u5b9e\u73b0 [x] \u81ea\u5b9a\u4e49\u65e5\u5fd7 \u548c \u754c\u9762\u4e0a\u67e5\u770b\u65e5\u5fd7 \u5982\u4f55\u4f7f\u7528 pip install pyxxl import asyncio from pyxxl import PyxxlRunner app = PyxxlRunner ( \"http://localhost:8080/xxl-job-admin/api/\" , executor_name = \"xxl-job-executor-sample\" , port = 9999 , host = \"172.17.0.1\" , ) @app . handler . register ( name = \"demoJobHandler\" ) async def test_task (): await asyncio . sleep ( 5 ) return \"\u6210\u529f...\" # \u5982\u679c\u4f60\u4ee3\u7801\u91cc\u9762\u6ca1\u6709\u5b9e\u73b0\u5168\u5f02\u6b65\uff0c\u8bf7\u4f7f\u7528\u540c\u6b65\u51fd\u6570\uff0c\u4e0d\u7136\u4f1a\u963b\u585e\u5176\u4ed6\u4efb\u52a1 @app . handler . register ( name = \"xxxxx\" ) def test_task3 (): return \"\u6210\u529f3\" app . run_executor () \u66f4\u591a\u793a\u4f8b\u548c\u63a5\u53e3\u6587\u6863\u8bf7\u53c2\u8003 PYXXL\u6587\u6863 \uff0c\u5177\u4f53\u4ee3\u7801\u5728example\u6587\u4ef6\u5939\u4e0b\u9762 \u5f00\u53d1\u4eba\u5458 \u4e0b\u9762\u662f\u5f00\u53d1\u4eba\u5458\u5982\u4f55\u5feb\u6377\u7684\u642d\u5efa\u5f00\u53d1\u8c03\u8bd5\u73af\u5883 \u542f\u52a8xxl\u7684\u8c03\u5ea6\u4e2d\u5fc3 ./init_dev_env.sh \u542f\u52a8\u6267\u884c\u5668 poetry install # \u4fee\u6539app.py\u4e2d\u76f8\u5173\u7684\u914d\u7f6e\u4fe1\u606f,\u7136\u540e\u542f\u52a8 poetry run python example/app.py","title":"Index"},{"location":"#xxl-jobs-python","text":"\u4f7f\u7528pyxxl\u53ef\u4ee5\u65b9\u4fbf\u7684\u628aPython\u5199\u7684\u65b9\u6cd5\u6ce8\u518c\u5230xxl-job\u4e2d,\u4f7f\u7528xxl-job-admin\u7ba1\u7406Python\u5b9a\u65f6\u4efb\u52a1\u548c\u5468\u671f\u4efb\u52a1","title":"xxl-jobs \u7684python\u5ba2\u6237\u7aef\u5b9e\u73b0"},{"location":"#_1","text":"\u6267\u884c\u5668\u6ce8\u518c\u5230job-admin task\u6ce8\u518c\uff0c\u7c7b\u4f3c\u4e8eflask\u8def\u7531\u88c5\u9970\u5668\u7684\u7528\u6cd5 \u4efb\u52a1\u7684\u7ba1\u7406\uff08\u652f\u6301\u5728\u754c\u9762\u4e0a\u53d6\u6d88\uff0c\u53d1\u8d77\u7b49\u64cd\u4f5c\uff0c\u4efb\u52a1\u5b8c\u6210\u540e\u4f1a\u56de\u8c03admin\uff09 \u6240\u6709\u963b\u585e\u7b56\u7565\u7684\u652f\u6301 \u5f02\u6b65\u652f\u6301\uff08\u63a8\u8350\uff09","title":"\u5df2\u7ecf\u652f\u6301\u7684\u529f\u80fd"},{"location":"#_2","text":"[x] \u81ea\u5b9a\u4e49\u65e5\u5fd7 \u548c \u754c\u9762\u4e0a\u67e5\u770b\u65e5\u5fd7","title":"\u5f85\u5b9e\u73b0"},{"location":"#_3","text":"pip install pyxxl import asyncio from pyxxl import PyxxlRunner app = PyxxlRunner ( \"http://localhost:8080/xxl-job-admin/api/\" , executor_name = \"xxl-job-executor-sample\" , port = 9999 , host = \"172.17.0.1\" , ) @app . handler . register ( name = \"demoJobHandler\" ) async def test_task (): await asyncio . sleep ( 5 ) return \"\u6210\u529f...\" # \u5982\u679c\u4f60\u4ee3\u7801\u91cc\u9762\u6ca1\u6709\u5b9e\u73b0\u5168\u5f02\u6b65\uff0c\u8bf7\u4f7f\u7528\u540c\u6b65\u51fd\u6570\uff0c\u4e0d\u7136\u4f1a\u963b\u585e\u5176\u4ed6\u4efb\u52a1 @app . handler . register ( name = \"xxxxx\" ) def test_task3 (): return \"\u6210\u529f3\" app . run_executor () \u66f4\u591a\u793a\u4f8b\u548c\u63a5\u53e3\u6587\u6863\u8bf7\u53c2\u8003 PYXXL\u6587\u6863 \uff0c\u5177\u4f53\u4ee3\u7801\u5728example\u6587\u4ef6\u5939\u4e0b\u9762","title":"\u5982\u4f55\u4f7f\u7528"},{"location":"#_4","text":"\u4e0b\u9762\u662f\u5f00\u53d1\u4eba\u5458\u5982\u4f55\u5feb\u6377\u7684\u642d\u5efa\u5f00\u53d1\u8c03\u8bd5\u73af\u5883","title":"\u5f00\u53d1\u4eba\u5458"},{"location":"#xxl","text":"./init_dev_env.sh","title":"\u542f\u52a8xxl\u7684\u8c03\u5ea6\u4e2d\u5fc3"},{"location":"#_5","text":"poetry install # \u4fee\u6539app.py\u4e2d\u76f8\u5173\u7684\u914d\u7f6e\u4fe1\u606f,\u7136\u540e\u542f\u52a8 poetry run python example/app.py","title":"\u542f\u52a8\u6267\u884c\u5668"},{"location":"changelog/","text":"0.1.7 \u4f18\u5316\u9519\u8bef\u4fe1\u606f \u652f\u6301\u81ea\u5b9a\u4e49\u6267\u884c\u5668\u53c2\u6570 \u652f\u6301executorTimeout","title":"Changelog"},{"location":"changelog/#017","text":"\u4f18\u5316\u9519\u8bef\u4fe1\u606f \u652f\u6301\u81ea\u5b9a\u4e49\u6267\u884c\u5668\u53c2\u6570 \u652f\u6301executorTimeout","title":"0.1.7"},{"location":"example/","text":"Example For full examples see github . App import asyncio import logging import time from pyxxl import PyxxlRunner from pyxxl.ctx import g from pyxxl.utils import setup_logging setup_logging ( logging . DEBUG ) app = PyxxlRunner ( \"http://localhost:8080/xxl-job-admin/api/\" , executor_name = \"xxl-job-executor-sample\" , port = 9999 , host = \"172.17.0.1\" , ) @app . handler . register ( name = \"demoJobHandler\" ) async def test_task (): # you can get task params with \"g\" print ( \"get executor params: %s \" % g . xxl_run_data . executorParams ) await asyncio . sleep ( 5 ) return \"\u6210\u529f...\" @app . handler . register ( name = \"xxxxx\" ) async def test_task3 (): await asyncio . sleep ( 3 ) return \"\u6210\u529f3\" @app . handler . register ( name = \"sync_func\" ) def test_task4 (): time . sleep ( 3 ) return \"\u6210\u529f3\" app . run_executor () Gunicorn Runserver app.py import asyncio import logging from fastapi import FastAPI from pyxxl import JobHandler logger = logging . getLogger ( \"pyxxl\" ) handler = logging . StreamHandler () logger . addHandler ( handler ) logger . setLevel ( logging . DEBUG ) app = FastAPI () xxl_handler = JobHandler () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } @xxl_handler . register ( name = \"demoJobHandler\" ) async def test_task (): await asyncio . sleep ( 10 ) return \"\u6210\u529f10\" gunicorn.conf.py import atexit from multiprocessing.util import _exit_function from pyxxl import PyxxlRunner bind = [ \"0.0.0.0:8000\" ] backlog = 512 workers = 1 timeout = 300 graceful_timeout = 2 limit_request_field_size = 8192 def when_ready ( server ): # pylint: disable=import-outside-toplevel,unused-import,no-name-in-module from app import xxl_handler atexit . unregister ( _exit_function ) runner = PyxxlRunner ( \"http://localhost:8080/xxl-job-admin/api/\" , executor_name = \"xxl-job-executor-sample\" , host = \"172.17.0.1\" , handler = xxl_handler , ) server . pyxxl_runner = runner runner . run_with_daemon ()","title":"Example"},{"location":"example/#example","text":"For full examples see github .","title":"Example"},{"location":"example/#app","text":"import asyncio import logging import time from pyxxl import PyxxlRunner from pyxxl.ctx import g from pyxxl.utils import setup_logging setup_logging ( logging . DEBUG ) app = PyxxlRunner ( \"http://localhost:8080/xxl-job-admin/api/\" , executor_name = \"xxl-job-executor-sample\" , port = 9999 , host = \"172.17.0.1\" , ) @app . handler . register ( name = \"demoJobHandler\" ) async def test_task (): # you can get task params with \"g\" print ( \"get executor params: %s \" % g . xxl_run_data . executorParams ) await asyncio . sleep ( 5 ) return \"\u6210\u529f...\" @app . handler . register ( name = \"xxxxx\" ) async def test_task3 (): await asyncio . sleep ( 3 ) return \"\u6210\u529f3\" @app . handler . register ( name = \"sync_func\" ) def test_task4 (): time . sleep ( 3 ) return \"\u6210\u529f3\" app . run_executor ()","title":"App"},{"location":"example/#gunicorn-runserver","text":"app.py import asyncio import logging from fastapi import FastAPI from pyxxl import JobHandler logger = logging . getLogger ( \"pyxxl\" ) handler = logging . StreamHandler () logger . addHandler ( handler ) logger . setLevel ( logging . DEBUG ) app = FastAPI () xxl_handler = JobHandler () @app . get ( \"/\" ) async def root (): return { \"message\" : \"Hello World\" } @xxl_handler . register ( name = \"demoJobHandler\" ) async def test_task (): await asyncio . sleep ( 10 ) return \"\u6210\u529f10\" gunicorn.conf.py import atexit from multiprocessing.util import _exit_function from pyxxl import PyxxlRunner bind = [ \"0.0.0.0:8000\" ] backlog = 512 workers = 1 timeout = 300 graceful_timeout = 2 limit_request_field_size = 8192 def when_ready ( server ): # pylint: disable=import-outside-toplevel,unused-import,no-name-in-module from app import xxl_handler atexit . unregister ( _exit_function ) runner = PyxxlRunner ( \"http://localhost:8080/xxl-job-admin/api/\" , executor_name = \"xxl-job-executor-sample\" , host = \"172.17.0.1\" , handler = xxl_handler , ) server . pyxxl_runner = runner runner . run_with_daemon ()","title":"Gunicorn Runserver"},{"location":"apis/executor/","text":"Executor \u6267\u884c\u5668\uff0c\u771f\u6b63\u7684\u8c03\u5ea6\u4efb\u52a1\u548c\u7b56\u7565\u90fd\u5728\u8fd9\u91cc Parameters: Name Type Description Default xxl_client XXL xxl\u5ba2\u6237\u7aef required handler Optional [ JobHandler ] Defaults to None. None loop Optional [ asyncio . AbstractEventLoop ] Defaults to None. None max_workers int \u6267\u884c\u540c\u6b65\u4efb\u52a1\u7684\u7ebf\u7a0b\u6c60. Defaults to 20. 20 task_timeout int \u5168\u5c40\u7684\u4efb\u52a1\u8d85\u65f6\u914d\u7f6e,\u5982\u679cexecutorTimeout\u53c2\u6570\u5b58\u5728,\u4ee5executorTimeout\u4e3a\u51c6. Defaults to 60*60. 60 * 60 max_queue_length int \u5355\u673a\u4e32\u884c\u7684\u961f\u5217\u957f\u5ea6\uff0c\u5f53\u963b\u585e\u7684\u4efb\u52a1\u5927\u4e8e\u6b64\u503c\u65f6\u4f1a\u629b\u5f03. Defaults to 30. 30 handler : JobHandler = handler or JobHandler () instance-attribute lock = asyncio . Lock () instance-attribute loop = loop or asyncio . get_event_loop () instance-attribute max_queue_length = max_queue_length instance-attribute queue : Dict [ int , List [ RunData ]] = defaultdict ( list ) instance-attribute task_timeout = task_timeout instance-attribute tasks : Dict [ int , asyncio . Task ] = {} instance-attribute thread_pool = ThreadPoolExecutor ( max_workers = max_workers , thread_name_prefix = 'pyxxl_pool' ) instance-attribute xxl_client = xxl_client instance-attribute cancel_job ( job_id : int ) -> None async graceful_close ( timeout : int = 60 ) -> None async is_running ( job_id : int ) -> bool async reset_handler ( handler : JobHandler ) -> None run_job ( run_data : RunData ) -> None async shutdown () -> None async","title":"Executor"},{"location":"apis/executor/#executor","text":"\u6267\u884c\u5668\uff0c\u771f\u6b63\u7684\u8c03\u5ea6\u4efb\u52a1\u548c\u7b56\u7565\u90fd\u5728\u8fd9\u91cc Parameters: Name Type Description Default xxl_client XXL xxl\u5ba2\u6237\u7aef required handler Optional [ JobHandler ] Defaults to None. None loop Optional [ asyncio . AbstractEventLoop ] Defaults to None. None max_workers int \u6267\u884c\u540c\u6b65\u4efb\u52a1\u7684\u7ebf\u7a0b\u6c60. Defaults to 20. 20 task_timeout int \u5168\u5c40\u7684\u4efb\u52a1\u8d85\u65f6\u914d\u7f6e,\u5982\u679cexecutorTimeout\u53c2\u6570\u5b58\u5728,\u4ee5executorTimeout\u4e3a\u51c6. Defaults to 60*60. 60 * 60 max_queue_length int \u5355\u673a\u4e32\u884c\u7684\u961f\u5217\u957f\u5ea6\uff0c\u5f53\u963b\u585e\u7684\u4efb\u52a1\u5927\u4e8e\u6b64\u503c\u65f6\u4f1a\u629b\u5f03. Defaults to 30. 30","title":"Executor"},{"location":"apis/executor/#pyxxl.executor.Executor.handler","text":"","title":"handler"},{"location":"apis/executor/#pyxxl.executor.Executor.lock","text":"","title":"lock"},{"location":"apis/executor/#pyxxl.executor.Executor.loop","text":"","title":"loop"},{"location":"apis/executor/#pyxxl.executor.Executor.max_queue_length","text":"","title":"max_queue_length"},{"location":"apis/executor/#pyxxl.executor.Executor.queue","text":"","title":"queue"},{"location":"apis/executor/#pyxxl.executor.Executor.task_timeout","text":"","title":"task_timeout"},{"location":"apis/executor/#pyxxl.executor.Executor.tasks","text":"","title":"tasks"},{"location":"apis/executor/#pyxxl.executor.Executor.thread_pool","text":"","title":"thread_pool"},{"location":"apis/executor/#pyxxl.executor.Executor.xxl_client","text":"","title":"xxl_client"},{"location":"apis/executor/#pyxxl.executor.Executor.cancel_job","text":"","title":"cancel_job()"},{"location":"apis/executor/#pyxxl.executor.Executor.graceful_close","text":"","title":"graceful_close()"},{"location":"apis/executor/#pyxxl.executor.Executor.is_running","text":"","title":"is_running()"},{"location":"apis/executor/#pyxxl.executor.Executor.reset_handler","text":"","title":"reset_handler()"},{"location":"apis/executor/#pyxxl.executor.Executor.run_job","text":"","title":"run_job()"},{"location":"apis/executor/#pyxxl.executor.Executor.shutdown","text":"","title":"shutdown()"},{"location":"apis/run_data/","text":"RunData \u8c03\u5ea6\u5668\u4f20\u5165\u7684\u6240\u6709\u53c2\u6570\uff0c\u6267\u884c\u51fd\u6570\u901a\u8fc7g\u6765\u83b7\u53d6\u8fd9\u4e9b\u53c2\u6570 Example from pyxxl.ctx import g @xxxxx async def test (): print ( g . xxl_run_data . logId ) broadcastIndex : Optional [ int ] = None class-attribute broadcastTotal : Optional [ int ] = None class-attribute executorBlockStrategy : str class-attribute executorHandler : str class-attribute executorParams : Optional [ str ] = None class-attribute executorTimeout : Optional [ int ] = None class-attribute glueSource : Optional [ str ] = None class-attribute glueType : Optional [ str ] = None class-attribute glueUpdatetime : Optional [ int ] = None class-attribute jobId : int class-attribute logDateTime : Optional [ int ] = None class-attribute logId : int class-attribute","title":"RunData"},{"location":"apis/run_data/#rundata","text":"\u8c03\u5ea6\u5668\u4f20\u5165\u7684\u6240\u6709\u53c2\u6570\uff0c\u6267\u884c\u51fd\u6570\u901a\u8fc7g\u6765\u83b7\u53d6\u8fd9\u4e9b\u53c2\u6570 Example from pyxxl.ctx import g @xxxxx async def test (): print ( g . xxl_run_data . logId )","title":"RunData"},{"location":"apis/run_data/#pyxxl.schema.RunData.broadcastIndex","text":"","title":"broadcastIndex"},{"location":"apis/run_data/#pyxxl.schema.RunData.broadcastTotal","text":"","title":"broadcastTotal"},{"location":"apis/run_data/#pyxxl.schema.RunData.executorBlockStrategy","text":"","title":"executorBlockStrategy"},{"location":"apis/run_data/#pyxxl.schema.RunData.executorHandler","text":"","title":"executorHandler"},{"location":"apis/run_data/#pyxxl.schema.RunData.executorParams","text":"","title":"executorParams"},{"location":"apis/run_data/#pyxxl.schema.RunData.executorTimeout","text":"","title":"executorTimeout"},{"location":"apis/run_data/#pyxxl.schema.RunData.glueSource","text":"","title":"glueSource"},{"location":"apis/run_data/#pyxxl.schema.RunData.glueType","text":"","title":"glueType"},{"location":"apis/run_data/#pyxxl.schema.RunData.glueUpdatetime","text":"","title":"glueUpdatetime"},{"location":"apis/run_data/#pyxxl.schema.RunData.jobId","text":"","title":"jobId"},{"location":"apis/run_data/#pyxxl.schema.RunData.logDateTime","text":"","title":"logDateTime"},{"location":"apis/run_data/#pyxxl.schema.RunData.logId","text":"","title":"logId"},{"location":"apis/runner/","text":"PyxxlRunner Example runner = PyxxlRunner( \"http://localhost:8080/xxl-job-admin/api/\", executor_name=\"xxl-job-executor-sample\", port=9999, host=\"172.17.0.1\", handler=xxl_handler, ) Parameters: Name Type Description Default xxl_admin_baseurl str xxl-admin\u670d\u52a1\u7aef\u66b4\u9732\u7684restful\u63a5\u53e3url(\u5982http://localhost:8080/xxl-job-admin/api/) required executor_name str xxl-admin\u4e0a\u5b9a\u4e49\u7684\u6267\u884c\u5668\u540d\u79f0,\u5fc5\u987b\u4e00\u81f4\u5426\u5219\u65e0\u6cd5\u6ce8\u518c(\u5982xxl-job-executor-sample) required handler JobHandler \u6267\u884c\u5668\u652f\u6301\u7684job,\u6ca1\u6709\u9884\u5148\u5b9a\u4e49\u7684job\u540d\u79f0\u4e5f\u4f1a\u6267\u884c\u5931\u8d25 None access_token str xxl-admin\u7684\u8ba4\u8bc1token,\u5982\u679c\u6ca1\u6709\u5f00\u542f\u4e0d\u9700\u8981\u4f20. Defaults to None. None host str \u6267\u884c\u5668\u7ed1\u5b9a\u7684host,xxl-admin\u901a\u8fc7\u8fd9\u4e2ahost\u6765\u56de\u8c03pyxxl\u6267\u884c\u5668,\u5982\u679c\u4e0d\u586b\u4f1a\u9ed8\u8ba4\u53d6\u7b2c\u4e00\u4e2a\u7f51\u5361\u7684\u5730\u5740. Defaults to None. None port int \u6267\u884c\u5668\u7ed1\u5b9a\u7684http\u670d\u52a1\u7684\u7aef\u53e3,\u4f5c\u7528\u540chost. Defaults to 9999. 9999 graceful bool \u6267\u884c\u5668\u63a5\u6536\u5173\u95ed\u4fe1\u53f7\u65f6\uff0c\u662f\u5426\u4f18\u96c5\u5173\u95ed\u5f53\u524d\u6267\u884c\u4e2d\u7684\u4efb\u52a1;\u5982\u679cfalse\u4f1a\u76f4\u63a5cancal\u6240\u6709\u7684\u4efb\u52a1 False graceful_timeout int \u4f18\u96c5\u5173\u95ed\u7684\u7b49\u5f85\u65f6\u95f4 60 executor_kwargs dict \u6267\u884c\u5668\u7684\u53c2\u6570(\u652f\u6301max_workers,task_timeout,max_queue_length) Executor None access_token = access_token instance-attribute daemon : Optional [ Process ] = None class-attribute executor : Optional [ Executor ] = None class-attribute executor_baseurl = 'http:// {host} : {port} ' . format ( host = self . host , port = self . port ) instance-attribute executor_kwargs = executor_kwargs or {} instance-attribute executor_name = executor_name instance-attribute graceful = graceful instance-attribute graceful_timeout = graceful_timeout instance-attribute handler = handler or JobHandler () instance-attribute host = ensure_host ( host ) instance-attribute port = port instance-attribute register_task : Optional [ asyncio . Task ] = None class-attribute xxl_admin_baseurl = xxl_admin_baseurl instance-attribute xxl_client : Optional [ XXL ] = None class-attribute create_server_app () -> web . Application run_executor ( handle_signals : bool = True ) -> None run_with_daemon () -> None","title":"PyxxlRunner"},{"location":"apis/runner/#pyxxlrunner","text":"Example runner = PyxxlRunner( \"http://localhost:8080/xxl-job-admin/api/\", executor_name=\"xxl-job-executor-sample\", port=9999, host=\"172.17.0.1\", handler=xxl_handler, ) Parameters: Name Type Description Default xxl_admin_baseurl str xxl-admin\u670d\u52a1\u7aef\u66b4\u9732\u7684restful\u63a5\u53e3url(\u5982http://localhost:8080/xxl-job-admin/api/) required executor_name str xxl-admin\u4e0a\u5b9a\u4e49\u7684\u6267\u884c\u5668\u540d\u79f0,\u5fc5\u987b\u4e00\u81f4\u5426\u5219\u65e0\u6cd5\u6ce8\u518c(\u5982xxl-job-executor-sample) required handler JobHandler \u6267\u884c\u5668\u652f\u6301\u7684job,\u6ca1\u6709\u9884\u5148\u5b9a\u4e49\u7684job\u540d\u79f0\u4e5f\u4f1a\u6267\u884c\u5931\u8d25 None access_token str xxl-admin\u7684\u8ba4\u8bc1token,\u5982\u679c\u6ca1\u6709\u5f00\u542f\u4e0d\u9700\u8981\u4f20. Defaults to None. None host str \u6267\u884c\u5668\u7ed1\u5b9a\u7684host,xxl-admin\u901a\u8fc7\u8fd9\u4e2ahost\u6765\u56de\u8c03pyxxl\u6267\u884c\u5668,\u5982\u679c\u4e0d\u586b\u4f1a\u9ed8\u8ba4\u53d6\u7b2c\u4e00\u4e2a\u7f51\u5361\u7684\u5730\u5740. Defaults to None. None port int \u6267\u884c\u5668\u7ed1\u5b9a\u7684http\u670d\u52a1\u7684\u7aef\u53e3,\u4f5c\u7528\u540chost. Defaults to 9999. 9999 graceful bool \u6267\u884c\u5668\u63a5\u6536\u5173\u95ed\u4fe1\u53f7\u65f6\uff0c\u662f\u5426\u4f18\u96c5\u5173\u95ed\u5f53\u524d\u6267\u884c\u4e2d\u7684\u4efb\u52a1;\u5982\u679cfalse\u4f1a\u76f4\u63a5cancal\u6240\u6709\u7684\u4efb\u52a1 False graceful_timeout int \u4f18\u96c5\u5173\u95ed\u7684\u7b49\u5f85\u65f6\u95f4 60 executor_kwargs dict \u6267\u884c\u5668\u7684\u53c2\u6570(\u652f\u6301max_workers,task_timeout,max_queue_length) Executor None","title":"PyxxlRunner"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.access_token","text":"","title":"access_token"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.daemon","text":"","title":"daemon"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.executor","text":"","title":"executor"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.executor_baseurl","text":"","title":"executor_baseurl"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.executor_kwargs","text":"","title":"executor_kwargs"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.executor_name","text":"","title":"executor_name"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.graceful","text":"","title":"graceful"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.graceful_timeout","text":"","title":"graceful_timeout"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.handler","text":"","title":"handler"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.host","text":"","title":"host"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.port","text":"","title":"port"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.register_task","text":"","title":"register_task"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.xxl_admin_baseurl","text":"","title":"xxl_admin_baseurl"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.xxl_client","text":"","title":"xxl_client"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.create_server_app","text":"","title":"create_server_app()"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.run_executor","text":"","title":"run_executor()"},{"location":"apis/runner/#pyxxl.main.PyxxlRunner.run_with_daemon","text":"","title":"run_with_daemon()"}]}